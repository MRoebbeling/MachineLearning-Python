# black is 1

# toDO:
# zwei richtigngen auf einem Feld zusammenfügen
# Abfragen ob noch platz zum danaben legen ist


tiles = [[1,0,0,0,0,0,0,0],
         [0,2,0,0,0,0,0,0],
         [0,0,2,0,0,0,0,0],
         [0,0,0,2,1,0,0,0],
         [0,0,0,0,2,2,0,0],
         [0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0],
         [0,0,0,0,0,0,0,0]]

def draw_board() :
    size (420,420)
    background (0,0.5,0.0)
    fill(0,0.7,0)
    stroke("black")
    for i in range(8):
        for j in range(8):
            rect(10+i*50, 10+j*50, 50, 50)
        
def draw_tiles() :
     for i in range(8):
        for j in range(8):
            if tiles[j][i]==1 : #draw black tile
                fill("black")
                oval(12+i*50, 12+j*50, 46, 46)

            if tiles[j][i]==2 : #draw black tile
                fill("white")
                oval(12+i*50, 12+j*50, 46, 46)

def print_tiles() :
    for i in range(len(tiles)):
        print(tiles[i])
        
def flipt_tiles(liste, tile_color) :
    for i in range(len(liste)) :
        print('liste',liste[i][0])
        tiles[liste[i][0]][liste[i][1]]=tile_color
    print_tiles()
    
                
def find_possibilities(tile_color) :
    answer = {"x-pos":[],"y-pos":[],"tiles":[],"direction":[]};
    possibilities = 0
    for i in range(8):
        for j in range(8):

            if tiles[j][i] == tile_color and i <= 7 and j <= 7 :

                #answer = []
                
                # check 8 directions for possibility
                
                # case #1
                # case -1,-1
                #possibilities = 0
                a=1
                while tiles[j-a][i-a]!=tile_color and tiles[j-a][i-a] != 0 :

                    a=a+1
                if a <= i and a <=j and a > 1 :
                    fill('pink')
                    text(str(a-1), (i-a)*50+30,(j-a)*50+40)
                    answer["x-pos"].append(i-a)
                    answer["y-pos"].append(j-a)
                    answer["tiles"].append(a-1)
                    answer["direction"].append(1)
                    
                # case #2
                # case 0,-1
                a=1
                while tiles[j-a][i]!=tile_color and tiles[j-a][i] != 0 :

                    a=a+1
                if a <= j and a > 1 :
                    fill('pink')
                    text(str(a-1), (i)*50+30,(j-a)*50+40)
                    answer["x-pos"].append(i)
                    answer["y-pos"].append(j-a)
                    answer["tiles"].append(a-1)
                    answer["direction"].append(2)
                    
                # case #3
                # case +1,-1
                # more complicate to check if tile is on the edge already
                a=1
                if i+a <= 7 :
                    while tiles[j-a][i+a]!=tile_color and tiles[j-a][i+a] != 0 and i+a <=6:

                        a=a+1
                    if a <= j and i <= 7 and a > 1 :
                        fill('pink')
                        text(str(a-1), (i+a)*50+30,(j-a)*50+40)
                        answer["x-pos"].append(i+a)
                        answer["y-pos"].append(j-a)
                        answer["tiles"].append(a-1)
                        answer["direction"].append(3)
                        
                # case #4
                # case -1,0
                a=1
                while tiles[j][i-a]!=tile_color and tiles[j][i-a] != 0 :

                    a=a+1
                if a <= i and a > 1 :
                    fill('pink')
                    text(str(a-1), (i-a)*50+30,(j)*50+40)
                    answer["x-pos"].append(i-a)
                    answer["y-pos"].append(j)
                    answer["tiles"].append(a-1)
                    answer["direction"].append(4)
                    
                # case #5    
                # case +1,0
                # chec if in playfield
                a=1
                if i+a <= 7 :
                    while tiles[j][i+a]!=tile_color and tiles[j][i+a] != 0  and i+a <=6:

                        a=a+1
                    if i <= 7 and a > 1:
                        fill('pink')
                        text(str(a-1), (i+a)*50+30,(j)*50+40)
                        answer["x-pos"].append(i+a)
                        answer["y-pos"].append(j)
                        answer["tiles"].append(a-1)
                        answer["direction"].append(5)

                # case #6
                # case -1,1
                # check if out of playfield
                a=1
                if j+a <= 7 :
                    while tiles[j+a][i-a]!=tile_color and tiles[j+a][i-a] != 0 and j+a <= 6:

                        a=a+1
                    if j <= 7 and a <= i and a > 1:
                        fill('pink')
                        text(str(a-1), (i-a)*50+30,(j+a)*50+40)
                        answer["x-pos"].append(i-a)
                        answer["y-pos"].append(j+a)
                        answer["tiles"].append(a-1)
                        answer["direction"].append(6)

                # case #7
                # case 0,1
                # check if out of playfield
                a=1
                if j+a <= 7 :
                    while tiles[j+a][i]!=tile_color and tiles[j+a][i] != 0 and j+a <= 6:

                        a=a+1
    
                    if j <= 7 and a > 1:
                        fill('pink')
                        text(str(a-1), (i)*50+30,(j+a)*50+40)
                        answer["x-pos"].append(i)
                        answer["y-pos"].append(j+a)
                        answer["tiles"].append(a-1)
                        answer["direction"].append(7)

                # case #8
                # case 1,1
                # check if out of playfield
                a=1
                if j+a <= 7 and i+a <= 7 :
                    while tiles[j+a][i+a]!=tile_color and tiles[j+a][i+a] != 0 and i+a <= 6 and j+a <= 6:

                        a=a+1
                    if j <= 7 and i <= 7 and a > 1:
                        fill('pink')
                        text(str(a-1), (i+a)*50+30,(j+a)*50+40)
                        answer["x-pos"].append(i+a)
                        answer["y-pos"].append(j+a)
                        answer["tiles"].append(a-1)
                        answer["direction"].append(8)
               
    return answer    
    
    
def evaluation (possibilities) :
    
    # First Check if one tile gets more then one solution
    # in case on tile gets more hits, it is added

    start =0
    while start < len(possibilities['tiles']):
        pop_position=[] 
        for i in range(start+1, len(possibilities['tiles'])) :
             # check is tile is the same
             #print(start,i,len(possibilities['tiles']))
             if possibilities['x-pos'][start] == possibilities['x-pos'][i] and possibilities['y-pos'][start] == possibilities['y-pos'][i]:
                 #add the number of tiles to the start tile an erase the i tile
                 #print('start: ',possibilities['x-pos'][start],possibilities['y-pos'][start])
                 #print('compe: ',possibilities['x-pos'][i],possibilities['y-pos'][i])
                 possibilities['tiles'][start]+=possibilities['tiles'][i]
                 pop_position.append(i)
                 
        for i in pop_position:
            possibilities['x-pos'].pop(i)
            possibilities['y-pos'].pop(i)
            possibilities['tiles'].pop(i)
            possibilities['direction'].pop(i)
            print(possibilities)
        start += 1         
        
                 
    best = 0
    pos = 0
    for i in range(len(possibilities['tiles'])) :

        if possibilities["tiles"][i] > best :
            best = possibilities["tiles"][i]
            pos = i

    position=(possibilities["x-pos"][pos],possibilities["y-pos"][pos])
    
    return position
    
def set_tile(tile_color, position) :
    if tile_color == 1 :
        fill('grey')
    else :
        fill('pink')
    oval(12 + position[0] * 50, 12 + position[1] * 50, 46, 46)
    tiles[position[1]][position[0]]=tile_color
    
    # Flip the tiles
    # checking all 8 possible directions from th enew set tile and 
    # flip every other tile until the same colored tile will appear
    # positions of the tiles that can be flipped are stored in a list, first
    
    # first direction 
    # direction x-1 y-1
    
    valid=0 #es steht nicht fest ob es reguläre tiles zum wenden gibt
    fliptiles=[] # liste mit den zu wendenen teilen
    if position[0] >= 1 and position[1] >= 1 :
        print('dir1')
        a=1
        while tiles[position[1]-a][position[0]-a]!=tile_color and tiles[position[1]-a][position[0]-a] != 0 :
            print(a)
            fliptiles.append([position[1]-a,position[0]-a])
            #fill('green')
            #oval(12 + (position[1]-a) * 50, 12 + (position[0]-a) * 50, 46, 46)
            #tiles[position[0]-a][position[1]-a]=tile_color
            a = a + 1 
        # check for valibility if the tile in the 
        # direction is tile_color or out of border
        print(fliptiles)
        print(position[0],position[1])
        if position[0] >= a and position[1] >= a and tiles[position[1]-a][position[0]-a]==tile_color :
            #if tiles[position[1]-a][position[0]-a]==tile_color :
            print('tät')
            flipt_tiles(fliptiles, tile_color)
            draw_board()
            draw_tiles()
            # funktion aufrufen um die Teile zu swappen und tiles zu setzten
            # nix mehr zeichenen. läuft über draw board
            
            
    # second direction 
    # direction x y-1
    if position[0] >= 1 and position[1] >= 1 :
        print('dir2')
        print_tiles()
        print('x',position[0],'y',position[1])
        a=1
        while tiles[position[1]-a][position[0]]!=tile_color and tiles[position[1]-a][position[0]] != 0 :
            print(a)
            fill('green')
            oval(12 + (position[0]) * 50, 12 + (position[1]-a) * 50, 46, 46)
            tiles[position[1]-a][position[0]]=tile_color
            a = a + 1         
        print_tiles()
    # direction six
    # direction x-1 y+1
    
    if position[0] <= 6 and position[1] >= 1 :
        print('dir6')
        print('x',position[0],'y',position[1])
        a=1
        print(position[1]-a)
        print(tiles[position[1]-a][position[0]+a])
        while tiles[position[1]-a][position[0]+a]!=tile_color and tiles[position[1]-a][position[0]+a] != 0 :
            print(a)
            fill('green')
            print('x',position[0]+a,'y',position[1]-a)
            oval(12 + (position[0]+a) * 50, 12 + (position[1]-a) * 50, 46, 46)
            tiles[position[1]-a][position[0]+a]=tile_color
            a = a + 1 
    
    
draw_board()
draw_tiles()
prod = find_possibilities(1)
position = evaluation(prod) 
print (prod)
set_tile(1, position)
print_tiles()
#prod = find_possibilities(2)
#set_tile(2, prod)

#print (prod)
